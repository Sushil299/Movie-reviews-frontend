# -*- coding: utf-8 -*-
"""movie_app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H6bvBO9a0cTKq-FrV8J_Zx2taSPGIrh7
"""

import streamlit as st
import requests
import plotly.express as px

# Backend URL
BACKEND_URL = "https://movie-reviews-frontend-h2rz.onrender.com"

# Streamlit UI
st.set_page_config(page_title="🎬 Movie Review Analyzer", layout="wide")

# Title with an Icon
st.markdown("""
<div style="text-align: center; font-size: 24px; font-weight: bold; color: #FF5733;">
🚀 Say Goodbye to Fake Reviews! 🎥
🔎 Get **Real & Unbiased** Movie Opinions from Reddit Discussions.
</div>
""", unsafe_allow_html=True)

# Debug section
st.sidebar.subheader("Debug Information")
debug_expander = st.sidebar.expander("Show Debug Info", expanded=False)

# User Input
st.markdown("### 🎥 Enter Movie Name")
movie_name = st.text_input("Movie Name", placeholder="e.g., Animal, Oppenheimer, Pathaan", label_visibility="collapsed")

if st.button("🔍 Analyze Movie"):
    if movie_name:
        with st.spinner("Fetching Reddit discussions..."):
            try:
                # Prepare request with proper headers
                headers = {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }

                # Log the request details
                request_url = f"{BACKEND_URL}/analyze"
                params = {"movie_name": movie_name}

                with debug_expander:
                    st.write(f"Request URL: {request_url}")
                    st.write(f"Params: {params}")

                # Make the request
                response = requests.get(request_url, params=params, headers=headers, timeout=30)

                # Log the response
                with debug_expander:
                    st.write(f"Response Status: {response.status_code}")
                    st.write(f"Response Headers: {dict(response.headers)}")

                if response.status_code == 200:
                    try:
                        api_data = response.json()

                        # Display raw response for debugging
                        with debug_expander:
                            st.write("Parsed API data:")
                            st.json(api_data)

                        # Check if we have a properly structured response
                        if "title" in api_data and "sections" in api_data:
                            # Display the title
                            st.title(api_data["title"])

                            # Process each section
                            for section in api_data["sections"]:
                                section_title = section.get("title", "")
                                section_content = section.get("content", "")

                                st.subheader(f"📌 {section_title}")

                                # Handle sentiment section specially with a pie chart
                                if "SENTIMENT" in section_title:
                                    positive = section.get("positive", 0)
                                    negative = section.get("negative", 0)
                                    neutral = section.get("neutral", 0)

                                    if positive > 0 or negative > 0 or neutral > 0:
                                        fig = px.pie(
                                            names=["Positive", "Negative", "Neutral"],
                                            values=[positive, negative, neutral],
                                            title="Sentiment Breakdown",
                                            color=["Positive", "Negative", "Neutral"],
                                            color_discrete_map={"Positive": "green", "Negative": "red", "Neutral": "gray"},
                                        )
                                        st.plotly_chart(fig)

                                    st.write(section_content)

                                    # Display key phrases if available
                                    key_phrases = section.get("key_phrases", [])
                                    if key_phrases:
                                        st.write("**Key Phrases:**")
                                        for phrase in key_phrases:
                                            st.write(f"- {phrase}")

                                # Handle key aspects section with a bar chart
                                elif "KEY ASPECTS" in section_title:
                                    aspects = section.get("items", [])
                                    if aspects:
                                        aspect_names = []
                                        aspect_scores = []
                                        aspect_explanations = []

                                        for aspect in aspects:
                                            name = aspect.get("name", "")
                                            score = aspect.get("score", "N/A")
                                            explanation = aspect.get("explanation", "")

                                            if name and score != "N/A":
                                                aspect_names.append(name)
                                                aspect_scores.append(score)
                                                aspect_explanations.append(explanation)

                                        if aspect_names and aspect_scores:
                                            fig = px.bar(
                                                x=aspect_names,
                                                y=aspect_scores,
                                                title="Key Aspects Ratings",
                                                labels={"x": "Aspect", "y": "Rating"},
                                                color=aspect_scores,
                                                color_continuous_scale="Viridis"
                                            )
                                            st.plotly_chart(fig)

                                        # Display explanations
                                        st.write(section_content)

                                # Handle praise and complaints section
                                elif "PRAISE & COMPLAINTS" in section_title:
                                    praise = section.get("praise", [])
                                    complaints = section.get("complaints", [])

                                    col1, col2 = st.columns(2)

                                    with col1:
                                        st.write("**✅ Praise:**")
                                        if praise:
                                            for item in praise:
                                                st.write(f"- {item}")
                                        else:
                                            st.write("No praise data available.")

                                    with col2:
                                        st.write("**❌ Complaints:**")
                                        if complaints:
                                            for item in complaints:
                                                st.write(f"- {item}")
                                        else:
                                            st.write("No complaints data available.")

                                # Handle similar movies section
                                elif "SIMILAR MOVIES" in section_title:
                                    movies = section.get("movies", [])
                                    if movies:
                                        for movie in movies:
                                            st.write(f"🎞️ **{movie}**")
                                    else:
                                        st.write(section_content)

                                # For all other sections, just display the content
                                else:
                                    st.write(section_content)

                                # Add a separator between sections
                                st.markdown("---")
                        else:
                            st.error("The API response did not contain the expected data structure.")

                    except Exception as e:
                        st.error(f"Error processing API response: {str(e)}")
                        with debug_expander:
                            st.exception(e)
                            st.text(response.text)
                else:
                    st.error(f"🚨 Error fetching movie analysis. Status code: {response.status_code}")
                    with debug_expander:
                        st.write("Response content:")
                        st.text(response.text[:500] + "..." if len(response.text) > 500 else response.text)

            except requests.exceptions.RequestException as e:
                st.error(f"🚨 Network error: {str(e)}")
                with debug_expander:
                    st.exception(e)
            except Exception as e:
                st.error(f"🚨 Unexpected error: {str(e)}")
                with debug_expander:
                    st.exception(e)
    else:
        st.warning("⚠️ Please enter a movie name.")