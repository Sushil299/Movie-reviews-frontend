# -*- coding: utf-8 -*-
"""movie_app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H6bvBO9a0cTKq-FrV8J_Zx2taSPGIrh7
"""

import streamlit as st
import requests
import json
import plotly.graph_objects as go

def fetch_movie_analysis(movie_name):
    url = "https://movie-reviews-frontend-h2rz.onrender.com/analyze"
    params = {"movie_name": movie_name}
    response = requests.get(url, params=params)

    if response.status_code == 200:
        return response.json()
    else:
        st.error("Failed to fetch data. Please try again.")
        return None

def sentiment_gauge(positive, negative, neutral):
    fig = go.Figure(go.Indicator(
        mode="gauge+number",
        value=positive - negative,
        title={"text": "Reddit Sentiment"},
        gauge={
            "axis": {"range": [-100, 100]},
            "bar": {"color": "red"},
            "steps": [
                {"range": [-100, -50], "color": "#ff6b6b"},
                {"range": [-50, 0], "color": "#ff9999"},
                {"range": [0, 50], "color": "#99ff99"},
                {"range": [50, 100], "color": "#4caf50"},
            ]
        }
    ))
    return fig

def display_analysis(data):
    if not data:
        return

    st.markdown(
        """
        <style>
            .main {background-color: #111; color: white;}
            .stTextInput, .stButton {width: 100%;}
            .stButton button {background-color: red; color: white; font-size: 18px;}
            .stCard {border-radius: 10px; background-color: #222; padding: 15px; margin-bottom: 10px;}
        </style>
        """, unsafe_allow_html=True
    )

    st.markdown(
        """
        <h1 style='text-align: center;'>üé¨ CineInsight</h1>
        <h3 style='text-align: center;'>Discover what Reddit *really* thinks about movies</h3>
        """, unsafe_allow_html=True
    )

    st.subheader(data.get("title", "Movie Analysis"))

    sentiment_section = None
    positive = negative = neutral = 0

    for section in data.get("sections", []):
        title = section.get("title", "")
        content = section.get("content", "")

        with st.container():
            if "SENTIMENT ANALYSIS" in title:
                sentiment_section = section
            elif "Positive:" in title:
                sentiment_values = content.split("\n")
                positive = int(sentiment_values[0].split(":")[1].strip().replace("%", ""))
                negative = int(sentiment_values[1].split(":")[1].strip().replace("%", ""))
                neutral = int(sentiment_values[2].split(":")[1].strip().replace("%", ""))
            elif "KEY ASPECTS" in title:
                st.markdown("### Key Aspects Ratings")
                for aspect in content.split("\n"):
                    if ":" in aspect:
                        aspect_name, score = aspect.split(":")
                        st.write(f"**{aspect_name.strip()}**: {score.strip()}")
            elif "Top Praise:" in title:
                st.markdown("### Top Praise & Complaints")
                praise_complaints = content.split("\n\n")
                if len(praise_complaints) >= 2:
                    st.write("**Praise:**")
                    for line in praise_complaints[0].split("\n"):
                        st.write(f"- {line}")

                    st.write("**Complaints:**")
                    for line in praise_complaints[1].split("\n"):
                        st.write(f"- {line}")
            elif "SIMILAR MOVIES" in title:
                st.markdown("### Similar Movies")
                for movie in section.get("movies", []):
                    st.write(f"- {movie}")
            elif "FINAL VERDICT" in title:
                st.markdown("### Final Verdict")
                st.write(content)
            else:
                st.markdown(f"### {title}")
                st.write(content)

    if sentiment_section:
        st.markdown("### Sentiment Analysis")
        st.plotly_chart(sentiment_gauge(positive, negative, neutral))

        st.write(f"**Positive:** {positive}%")
        st.write(f"**Negative:** {negative}%")
        st.write(f"**Neutral:** {neutral}%")

# Streamlit UI
st.sidebar.markdown("### üé• Search for a movie")
movie_name = st.sidebar.text_input("Enter Movie Name", "Animal")

if st.sidebar.button("üîç Analyze Movie"):
    with st.spinner("Fetching movie analysis..."):
        api_data = fetch_movie_analysis(movie_name)
        if api_data:
            st.session_state["api_data"] = api_data

if "api_data" in st.session_state:
    display_analysis(st.session_state["api_data"])