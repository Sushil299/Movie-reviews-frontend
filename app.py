# -*- coding: utf-8 -*-
"""movie_app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H6bvBO9a0cTKq-FrV8J_Zx2taSPGIrh7
"""

import streamlit as st
import requests
import plotly.express as px

# Backend URL
BACKEND_URL = "https://movie-reviews-frontend-h2rz.onrender.com"

# Streamlit UI
st.set_page_config(page_title="🎬 Movie Review Analyzer", layout="wide")

# Title with an Icon
st.markdown("""
<div style="text-align: center; font-size: 24px; font-weight: bold; color: #FF5733;">
🚀 Say Goodbye to Fake Reviews! 🎥
🔎 Get **Real & Unbiased** Movie Opinions from Reddit Discussions.
</div>
""", unsafe_allow_html=True)

# User Input
st.markdown("### 🎥 Enter Movie Name")
movie_name = st.text_input("Movie Name", placeholder="e.g., Animal, Oppenheimer, Pathaan", label_visibility="collapsed")

if st.button("🔍 Analyze Movie"):
    if movie_name:
        with st.spinner("Fetching Reddit discussions..."):
            response = requests.get(f"{BACKEND_URL}/analyze", params={"movie_name": movie_name})

            if response.status_code == 200:
                analysis = response.json()

                # Display Results
                st.subheader("📢 TL;DR Summary")
                st.success(analysis.get("TL;DR Summary", "No summary available."))

                # Sentiment Analysis Visualization
                st.subheader("📊 Sentiment Analysis")
                sentiment = analysis.get("Overall Sentiment Analysis", {})
                labels = ["Positive", "Negative", "Neutral"]
                values = [sentiment.get("Positive", 0), sentiment.get("Negative", 0), sentiment.get("Neutral", 0)]
                fig = px.pie(names=labels, values=values, title="Sentiment Breakdown", color=labels,
                             color_discrete_map={"Positive": "green", "Negative": "red", "Neutral": "gray"})
                st.plotly_chart(fig)

                # Audience Reactions
                st.subheader("💬 Audience Reactions")
                st.write(analysis.get("Summary of Audience Reactions", "No data available."))

                # Key Aspects Ratings
                st.subheader("🎭 Key Aspects Ratings")
                aspects = analysis.get("Key Aspects Discussed", {})
                aspect_labels, aspect_values = zip(*aspects.items()) if aspects else ([], [])
                if aspects:
                    fig = px.bar(x=aspect_labels, y=aspect_values, title="Key Aspects Ratings",
                                 labels={"x": "Aspect", "y": "Rating"}, color=aspect_values)
                    st.plotly_chart(fig)

                # Common Praises & Complaints
                st.subheader("👍 Common Praise & 👎 Complaints")
                col1, col2 = st.columns(2)
                with col1:
                    st.write("**✅ Praise:**")
                    praises = analysis.get("Common Praise", [])
                    for praise in praises:
                        st.write(f"- {praise}")

                with col2:
                    st.write("**❌ Complaints:**")
                    complaints = analysis.get("Common Complaints", [])
                    for complaint in complaints:
                        st.write(f"- {complaint}")

                # Similar Movies
                st.subheader("🎬 Similar Movies")
                similar_movies = analysis.get("Comparison with Similar Movies", [])
                for movie in similar_movies:
                    st.write(f"🎞️ **{movie['Title']} ({movie['Year']})** - {movie['Brief explanation']}")

                # Final Verdict
                st.subheader("🏆 Final Verdict")
                st.info(analysis.get("Final Verdict", "No final verdict available."))

            else:
                st.error("🚨 Error fetching movie analysis. Please try again.")
    else:
        st.warning("⚠️ Please enter a movie name.")
