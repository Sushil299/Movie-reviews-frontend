# -*- coding: utf-8 -*-
"""backend

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TiA6-37RYxY1T4RB18XXJ009WhLO_oFm
"""

import os
import asyncpraw
import google.generativeai as genai
from fastapi import FastAPI
from typing import Dict, Any
import logging
from datetime import datetime, timedelta
import json
import asyncio

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load API keys from environment variables
REDDIT_CLIENT_ID = os.getenv("REDDIT_CLIENT_ID")
REDDIT_CLIENT_SECRET = os.getenv("REDDIT_CLIENT_SECRET")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# Initialize APIs
reddit = asyncpraw.Reddit(
    client_id=REDDIT_CLIENT_ID,
    client_secret=REDDIT_CLIENT_SECRET,
    user_agent="MovieReviewScraper"
)

genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-1.5-flash')

INDIAN_MOVIE_SUBREDDITS = [
    "bollywood", "IndianCinema", "tollywood", "kollywood", "MalayalamMovies",
    "Lollywood", "BollyBlindsNGossip", "bollywoodmemes", "India", "AskIndia",
    "movies", "moviecritic", "shittymoviedetails", "netflix", "boxoffice"
]

# FastAPI App
app = FastAPI()

@app.get("/")
async def home():
    return {"message": "Movie Review Backend is Running!"}

@app.get("/search_reddit")
async def search_reddit(movie_name: str, days: int = 60) -> Dict[str, Any]:
    comments, posts = [], []
    total_posts = 0
    time_threshold = datetime.utcnow() - timedelta(days=days)

    for subreddit_name in INDIAN_MOVIE_SUBREDDITS:
        try:
            subreddit = await reddit.subreddit(subreddit_name)
            search_results = subreddit.search(movie_name, time_filter="month", limit=10)

            async for post in search_results:
                post_time = datetime.fromtimestamp(post.created_utc)
                if post_time < time_threshold or post.score < 50:
                    continue

                total_posts += 1
                posts.append({
                    "title": post.title,
                    "score": post.score,
                    "url": f"https://www.reddit.com{post.permalink}",
                    "num_comments": post.num_comments
                })

                await post.comments.replace_more(limit=5)
                for comment in post.comments.list()[:20]:
                    if len(comment.body.strip()) > 30 and comment.score >= 20:
                        comments.append({
                            "text": comment.body,
                            "score": comment.score,
                            "author": str(comment.author),
                            "url": f"https://www.reddit.com{comment.permalink}"
                        })
        except Exception as e:
            logger.warning(f"Error searching subreddit {subreddit_name}: {str(e)}")
            continue

    comments.sort(key=lambda x: x["score"], reverse=True)
    return {"posts": posts, "comments": comments[:50], "total_posts": total_posts}

@app.get("/analyze")
async def analyze_with_gemini(movie_name: str) -> Dict[str, Any]:
    reddit_data = await search_reddit(movie_name, days=60)
    posts_text = "\n\n".join([f"Post: {p['title']}" for p in reddit_data["posts"]])
    comments_text = "\n\n".join([f"Comment: {c['text']}" for c in reddit_data["comments"][:30]])

    prompt = f"""
    Based on Reddit discussions and comments about {movie_name} in posts {posts_text} and comments {comments_text}, provide a detailed analysis to help users decide whether to watch the movie.

    If limited data is available (fewer than 10 meaningful comments/posts), please note this limitation at the beginning of your response.

    Include:

    1. **TL;DR Summary**
      - A concise 1-2 sentence verdict on the movie.

    2. **Overall Sentiment Analysis**
      - Percentage breakdown of Positive, Negative, and Neutral opinions.
      - Include 3-5 key phrases/words that drove your sentiment classification.
      - Note confidence level of sentiment analysis (high/medium/low).

    3. **Summary of Audience Reactions**
      - A 5-7 sentence overview of common praises and criticisms.
      - Indicate if opinions are polarized or generally consistent.
      - Note if analysis contains potential spoilers.

    4. **Key Aspects Discussed**
      - Rating and analysis for: Acting, Story, Direction, Music, Cinematography, and Special Effects.
      - For each aspect, provide a score (1-10) and 1-2 sentence explanation.

    5. **Common Praise & Complaints**
      - 3-5 most frequently mentioned positive aspects.
      - 3-5 most frequently mentioned criticisms.

    6. **Comparison with Similar Movies**
      - List 3-5 similar Indian movies that viewers might enjoy.
      - For each recommendation, provide:
        * Title
        * Year
        * Brief explanation of similarity (theme, director, style, actors)
        * Whether it's rated better/worse than the movie in question

    7. **Final Verdict**
      - Who would most likely enjoy this movie? (demographics, interests, preferences)
      - Who might not enjoy it?
      - Is it worth watching in theaters or better for streaming?

    Respond in a structured **JSON format**.
    """

    response = model.generate_content(prompt)

    try:
        analysis = response.text.split("```json")[1].split("```")[0].strip()
        return json.loads(analysis)
    except Exception as e:
        logger.error(f"Error parsing Gemini response: {str(e)}")
        return {}

# Run the app using `uvicorn backend:app --host 0.0.0.0 --port 8000`